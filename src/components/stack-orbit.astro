---
import { Image } from "astro:assets";
import { getLangFromUrl, useTranslations } from "../i18n/utils";
import { getCVUrl } from '../utils/getCVUrl'

interface Props {
  electronColor?: string;
  nucleusColor?: string;
  orbitColor?: string;
  size?: number;
}

const {
  electronColor = '#2dd4bf',
  nucleusColor = '#0f766e',
  orbitColor = '#5eead4',
  size = 300
} = Astro.props;

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

---

<div class="orbit-wrapper">
  <div class="orbit-container">
    <div class="atom">
      <div class="electron">
        <Image src='/assets/icons/nodejs-orbit.svg' alt="NodeJS" class="electron-icon" width={40} height={40} />
      </div>
      <div class="electron">
        <Image src='/assets/icons/typescript-orbit.svg' alt="Typescript" class="electron-icon" width={30} height={30} />
      </div>
      <div class="electron">
        <Image src='/assets/icons/nextjs.svg' alt="NextJS" class="electron-icon" width={40} height={40} />
      </div>
      <a href={getCVUrl(lang)} class="nucleus grid place-items-center" target="_blank" title={t('contact.download.alt')}>
        <Image src='/assets/icons/resume.svg' alt="Download CV" class="" width={35} height={35} />
      </a>
    </div>
  </div>
</div>

<style define:vars={{ electronColor, nucleusColor, orbitColor, size }}>
  .orbit-wrapper {
    width: 100%;
    height: calc(var(--size) * 1px);
    display: grid;
    place-items: center;
  }

  .orbit-container {
    width: calc(var(--size) * 1px);
    height: calc(var(--size) * 1px);
    position: relative;
  }

  .atom {
    position: absolute;
    left: 50%;
    top: 50%;
    height: 100%;
    width: 100%;
    transform-style: preserve-3d;
    perspective: 1000px;
    transform: translate(-50%, -50%);
    transform-style: preserve-3d;
  }

  .electron {
    position: absolute;
    left: 50%;
    top: 50%;
    border: 1px solid var(--orbitColor);
    border-radius: 50%;
    height: 100%;
    width: 100%;
    transform-style: preserve-3d;
    transform: translate(-50%, -50%) rotateY(40deg) rotate(0deg);
    animation: orbit 6s infinite linear;
    transform-origin: 50% 50%;
    transform-style: preserve-3d;
    pointer-events: none;
  }

  .orbit-container:hover .electron,
  .orbit-container:hover .electron:nth-of-type(2),
  .orbit-container:hover .electron:nth-of-type(3) {
    animation-play-state: paused;
  }

  .electron-icon {
    position: absolute;
    top: 0;
    left: 50%;
    transform: translate(-50%, -50%) translateZ(2px);
    animation: rotateWithOrbit 6s infinite linear;
    filter: drop-shadow(0 0 15px var(--electronColor));
    width: 30px;
    height: 30px;
    z-index: 10;
    transform-style: preserve-3d;
  }

  .orbit-container:hover .electron-icon,
  .orbit-container:hover .electron:nth-of-type(2) .electron-icon,
  .orbit-container:hover .electron:nth-of-type(3) .electron-icon {
    animation-play-state: paused;
  }

  .electron:nth-of-type(2) {
    animation: orbit2 6s infinite linear;
  }

  .electron:nth-of-type(2) .electron-icon {
    animation: rotateWithOrbit2 6s infinite linear;
  }

  .electron:nth-of-type(3) {
    animation: orbit3 6s infinite linear;
  }

  .electron:nth-of-type(3) .electron-icon {
    animation: rotateWithOrbit3 6s infinite linear;
  }

  .nucleus {
    content: "";
    width: 60px;
    height: 60px;
    transform: translate(-50%, -50%) translateZ(1px);
    background-color: var(--nucleusColor);
    transform-origin: 50% 50%;
    position: absolute;
    border-radius: 50%;
    border: 1px solid var(--orbitColor);
    top: 50%;
    left: 50%;
    background-image: radial-gradient(circle at top left, var(--nucleusColor), color-mix(in srgb, var(--nucleusColor) 85%, black) 75%);
    box-shadow: 0 0 20px var(--nucleusColor);
    z-index: 50;
  }

  @keyframes orbit {
    0% { transform: translate(-50%, -50%) rotateY(60deg) rotateX(-30deg) rotate(0deg); }
    100% { transform: translate(-50%, -50%) rotateY(60deg) rotateX(-30deg) rotate(360deg); }
  }

  @keyframes rotateWithOrbit {
    0% { transform: translate(-50%, -50%) rotateZ(0deg) rotateX(30deg) rotateY(-40deg) scale(.80); }
    25% { transform: translate(-50%, -50%) rotateZ(-90deg) rotateX(30deg) rotateY(-40deg) scale(.60); }
    50% { transform: translate(-50%, -50%) rotateZ(-180deg) rotateX(30deg) rotateY(-40deg) scale(.80); }
    75% { transform: translate(-50%, -50%) rotateZ(-270deg) rotateX(30deg) rotateY(-40deg) scale(1); }
    100% { transform: translate(-50%, -50%) rotateZ(-360deg) rotateX(30deg) rotateY(-40deg) scale(.80); }
  }

  @keyframes orbit2 {
    0% { transform: translate(-50%, -50%) rotateY(60deg) rotateX(30deg) rotate(180deg); }
    100% { transform: translate(-50%, -50%) rotateY(60deg) rotateX(30deg) rotate(540deg); }
  }

  @keyframes rotateWithOrbit2 {
    0% { transform: translate(-50%, -50%) rotateZ(-180deg) rotateX(-30deg) rotateY(-40deg) scale(.80); }
    25% { transform: translate(-50%, -50%) rotateZ(-270deg) rotateX(-30deg) rotateY(-40deg) scale(1); }
    50% { transform: translate(-50%, -50%) rotateZ(-360deg) rotateX(-30deg) rotateY(-40deg) scale(.80); }
    75% { transform: translate(-50%, -50%) rotateZ(-450deg) rotateX(-30deg) rotateY(-40deg) scale(.60); }
    100% { transform: translate(-50%, -50%) rotateZ(-540deg) rotateX(-30deg) rotateY(-40deg) scale(.80); }
  }

  @keyframes orbit3 {
    0% { transform: translate(-50%, -50%) rotateY(0deg) rotateX(75deg) rotate(180deg); }
    100% { transform: translate(-50%, -50%) rotateY(0deg) rotateX(75deg) rotate(540deg); }
  }

  @keyframes rotateWithOrbit3 {
    0% { transform: translate(-50%, -50%) rotateZ(-180deg) rotateX(-80deg) rotateY(0deg) scale(1); }
    25% { transform: translate(-50%, -50%) rotateZ(-270deg) rotateX(-80deg) rotateY(0deg) scale(.8); }
    50% { transform: translate(-50%, -50%) rotateZ(-360deg) rotateX(-80deg) rotateY(0deg) scale(.60); }
    75% { transform: translate(-50%, -50%) rotateZ(-450deg) rotateX(-80deg) rotateY(0deg) scale(.80); }
    100% { transform: translate(-50%, -50%) rotateZ(-540deg) rotateX(-80deg) rotateY(0deg) scale(1); }
  }
</style>
